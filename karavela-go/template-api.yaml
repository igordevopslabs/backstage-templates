apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: go-api-template
  title: "Template para API Go"
  description: Crie uma nova API Go com uma rota de healthcheck e configuração Docker.
spec:
  owner: time-de-fundacao
  type: service

  parameters:
    - title: Configurações da Aapp
      properties:
        apiName:
          title: Nome da App
          type: string
          description: O nome da sua app (por exemplo, minha-api).
        description:
          title: Descrição
          type: string
          description: Uma descrição curta da sua app.
        port:
          title: Porta
          type: string
          description: A porta na qual o servidor HTTP irá rodar.
          enum: ["3000", "4000", "5000", "6000", "7000", "8000", "9000"]
        goVersion:
          title: Versão Go 
          type: string
          description: versão da sua app (por exemplo, 1.20).
          enum: ["1.18", "1.19", "1.20", "1.21", "1.22"]
    
    - title: Características da Aplicação
      required: [typeApp, FrameworkApp]
      properties:
        typeApp:
          title: Característica da Aplicação
          type: string
          enum: [API,Worker]
          ui:widget: radio
      dependencies:
        typeApp:
          oneOf:
            - properties:
                typeApp:
                  enum: [API]
                FrameworkApp:
                  title: Framework
                  type: string
                  enum: [gin,chi,http]
                  enumNames: [gin,chi,http]

  steps:
    - id: fetch-base
      name: Fetch Base
      action: fetch:template
      if: "${{ parameters.FrameworkApp === 'http' }}"
      input:
        url: ./template-go-http
        values:
          apiName: "${{ parameters.apiName }}"
          description: "${{ parameters.description }}"
          goVersion: "${{ parameters.goVersion }}"
          port: "${{ parameters.port }}"

    - id: fetch-base
      name: Fetch Base
      action: fetch:template
      if: "${{ parameters.FrameworkApp === 'chi' }}"
      input:
        url: ./template-go-chi
        values:
          apiName: "${{ parameters.apiName }}"
          description: "${{ parameters.description }}"
          goVersion: "${{ parameters.goVersion }}"
          port: "${{ parameters.port }}"

    - id: fetch-base
      name: Fetch Base
      action: fetch:template
      if: "${{ parameters.FrameworkApp === 'gin' }}"
      input:
        url: ./template-go-gin
        values:
          apiName: "${{ parameters.apiName }}"
          description: "${{ parameters.description }}"
          goVersion: "${{ parameters.goVersion }}"
          port: "${{ parameters.port }}"

    - id: publish-github
      name: Publish to GitHub
      action: publish:github
      if: "${{ parameters.optionAppType === 'API' }}"
      input:
        allowedHosts: ["github.com"]
        repoUrl: github.com?owner=igordevopslabs&repo=${{ parameters.apiName }}
        requireBranchesToBeUpToDate: true
        description: ${{ parameters.description }}
        access: private # or 'private'
        defaultBranch: main

    - id: register
      name: Inserindo no inventário de serviços
      action: catalog:register
      if: "${{ parameters.optionAppType === 'API' }}"
      input:
        repoContentsUrl: ${{ steps['publish-github'].output.repoContentsUrl }}
        catalogInfoPath: '/catalog-info.yaml'

  output:
    links:
      - title: Repository
        url: ${{ steps['fetch-base'].output.remoteUrl }}
      - title: Open in catalog
        icon: catalog
        entityRef: ${{ steps['register'].output.entityRef }}